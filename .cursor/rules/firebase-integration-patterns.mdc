---
description: 
globs: 
alwaysApply: false
---
# Firebase Integration Patterns

## Overview
Critical patterns for Firebase integration in Adjutant, including timestamp handling, undefined value prevention, and proper app instance management.

## Common Issues and Solutions

### 1. Firebase Timestamp Handling

**Problem**: Firebase timestamps come as objects with `seconds` and `nanoseconds`, not as JavaScript Date objects.

**Solution**: Enhanced date parsing in [src/windows/profile-management.js](mdc:src/windows/profile-management.js):

```javascript
function formatDate(dateInput) {
    try {
        let date;
        
        if (dateInput && typeof dateInput.toDate === 'function') {
            // Firestore Timestamp object with toDate method
            date = dateInput.toDate();
        } else if (dateInput && typeof dateInput === 'object' && dateInput.seconds) {
            // Firebase Timestamp object with seconds and nanoseconds
            date = new Date(dateInput.seconds * 1000 + (dateInput.nanoseconds || 0) / 1000000);
        } else if (dateInput instanceof Date) {
            date = dateInput;
        } else if (typeof dateInput === 'string' || typeof dateInput === 'number') {
            date = new Date(dateInput);
        } else {
            console.warn('Unknown date format:', dateInput);
            return 'Unknown';
        }
        
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch (error) {
        console.warn('Error formatting date:', error, dateInput);
        return 'Unknown';
    }
}
```

### 2. Undefined Value Prevention

**Problem**: Firebase rejects documents with `undefined` fields, causing save failures.

**Critical Fix** in [src/workflow.ts](mdc:src/workflow.ts):

```typescript
// ❌ BAD - Causes Firebase errors
const articleData = {
    topic_filtered: false,
    topic_filtered_at: undefined  // Firebase rejects this
};

// ✅ GOOD - Only include fields with values
const articleData = {
    topic_filtered: false
    // topic_filtered_at omitted if undefined
};

// ✅ GOOD - Conditional object spread
const enhancedResult = {
    ...analysisResult,
    topic_filtered: scoredArticle.topic_filtered || false,
    ...(scoredArticle.topic_filtered_at && { topic_filtered_at: scoredArticle.topic_filtered_at })
};

// ✅ GOOD - Conditional assignment
if (analysis.topic_filtered_at) {
    (articleData as any).topic_filtered_at = analysis.topic_filtered_at;
}
```

### 3. Firebase App Instance Management

**Pattern**: Use unique app names to prevent conflicts between different operations:

```typescript
// ✅ Unique app names prevent conflicts
const appName = `profile-load-${Date.now()}`;
const app = initializeApp(userConfig.firebase, appName);
const db = getFirestore(app);
```

**Used in**:
- Profile loading: `profile-load-${Date.now()}`
- Profile deletion: `profile-delete-app`
- Profile updates: `profile-update-${Date.now()}`
- Workflow operations: `workflow-${Date.now()}`

## Field Naming Conventions

### Firebase Document Structure
Firebase documents use `snake_case` for field names:

```typescript
// ✅ Correct Firebase field names
interface FirebaseProfile {
    likes: string[];
    dislikes: string[];
    changelog: string;
    last_updated: Date;    // snake_case
    created_at: Date;      // snake_case
}
```

### UI Mapping
**CRITICAL**: Don't convert to camelCase when loading - keep snake_case:

```typescript
// ✅ CORRECT - Keep snake_case from Firebase
const result = {
    success: true,
    profile: {
        id: 'user-profile',
        likes: profile.likes || [],
        dislikes: profile.dislikes || [],
        changelog: profile.changelog || '',
        last_updated: profile.last_updated,  // Keep snake_case
        created_at: profile.created_at,      // Keep snake_case
        version: profile.version || 1
    }
};

// ❌ WRONG - Don't convert to camelCase
// lastUpdated: profile.last_updated,  // Causes loading issues
// createdAt: profile.created_at,      // Causes loading issues
```

## Error Handling Patterns

### Retry Logic
Use retry patterns for Firebase operations in [src/utils/retry.ts](mdc:src/utils/retry.ts):

```typescript
const saveResult = await withRetry(async () => {
    await setDoc(doc(articlesCollection, articleId), articleData);
    return true;
});
```

### Error Messages
Log detailed errors for debugging:

```typescript
catch (error) {
    console.error('❌ Error loading profile:', error);
    return {
        success: false,
        message: `Error loading profile: ${error instanceof Error ? error.message : 'Unknown error'}`
    };
}
```

## Validation Patterns

### Input Validation
Always validate before Firebase operations:

```typescript
// Type checking
if (!Array.isArray(likes) || !Array.isArray(dislikes)) {
    return { success: false, message: 'Invalid input: likes and dislikes must be arrays' };
}

// Content validation
const validatePreference = (pref: string): boolean => {
    if (typeof pref !== 'string') return false;
    const trimmed = pref.trim();
    return trimmed.length >= 5 && trimmed.length > 0;
};
```

### Data Sanitization
Clean data before saving:

```typescript
const updateData = {
    likes: likes.map(like => like.trim()),
    dislikes: dislikes.map(dislike => dislike.trim()),
    changelog: 'User manually adjusted likes/dislikes',
    last_updated: new Date()
};
```

## Common Anti-Patterns

### ❌ Don't Do These

```typescript
// ❌ Setting undefined values
articleData.topic_filtered_at = undefined;

// ❌ Using same app name multiple times
const app = initializeApp(userConfig.firebase, 'my-app');

// ❌ Converting Firebase snake_case to camelCase
profile.lastUpdated = firestoreDoc.last_updated;

// ❌ Not handling timestamp objects
const date = profile.created_at.toString(); // May fail

// ❌ Missing error handling
await setDoc(doc(db, 'collection', 'id'), data); // No try/catch
```

### ✅ Do These Instead

```typescript
// ✅ Only set defined values
if (value !== undefined) {
    articleData.field = value;
}

// ✅ Unique app names
const app = initializeApp(config, `operation-${Date.now()}`);

// ✅ Keep Firebase field names
profile.last_updated = firestoreDoc.last_updated;

// ✅ Proper timestamp handling
const date = formatDate(profile.created_at);

// ✅ Comprehensive error handling
try {
    await setDoc(doc(db, 'collection', 'id'), data);
} catch (error) {
    console.error('Save failed:', error);
    // Handle error appropriately
}
```

## Development Tips

### Debugging Firebase Issues
1. **Check browser network tab** for Firebase API calls
2. **Use Firebase console** to verify document structure
3. **Log document data** before processing: `console.log(JSON.stringify(doc.data(), null, 2))`
4. **Verify field names** match exactly between code and Firebase

### Testing Firebase Operations
1. **Test with invalid data** to verify validation
2. **Test network failures** with retry logic
3. **Test concurrent operations** with unique app names
4. **Verify data integrity** after operations
