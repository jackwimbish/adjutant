---
description: 
globs: 
alwaysApply: false
---
# Build and Development Workflow

## Overview
Adjutant has specific build requirements due to its mixed TypeScript/HTML/JavaScript architecture and security-focused configuration system.

## Build Process
The application uses a two-step build process:

### 1. TypeScript Compilation
```bash
npm run build  # Runs: tsc
```
- Compiles all `.ts` files from `src/` to `dist/`
- **Does NOT copy**: `.html` and `.js` files (settings window assets)
- **Output**: Compiled JavaScript in `dist/` directory

### 2. Manual Asset Copying (Required)
```bash
cp src/windows/settings.html dist/windows/
cp src/windows/settings.js dist/windows/
```
- **Required for**: Settings window functionality
- **Reason**: TypeScript compiler only handles `.ts` files
- **Must run**: After every `npm run build`

## Development Workflow
For active development:

```bash
# Standard development cycle
npm run build                           # Compile TypeScript
cp src/windows/settings.html dist/windows/  # Copy settings HTML
cp src/windows/settings.js dist/windows/    # Copy settings JS
npm start                               # Run application
```

## Project Structure
Key files and their purposes:

### Configuration System
- [src/config/user-config.ts](mdc:src/config/user-config.ts) - Core configuration management
- [src/main.ts](mdc:src/main.ts) - Main process with IPC handlers
- [src/preload.ts](mdc:src/preload.ts) - Main window preload script

### Settings System
- [src/windows/settings.html](mdc:src/windows/settings.html) - Settings UI (requires manual copy)
- [src/windows/settings.js](mdc:src/windows/settings.js) - Settings logic (requires manual copy)
- [src/windows/settings-preload.ts](mdc:src/windows/settings-preload.ts) - Settings preload (auto-compiled)

### Main Interface
- [index.html](mdc:index.html) - Main application interface with settings button
- [src/renderer.ts](mdc:src/renderer.ts) - Main window renderer logic

### Workflow System
- [src/workflow.ts](mdc:src/workflow.ts) - Background article processing
- [src/workflows/analysis-workflow.ts](mdc:src/workflows/analysis-workflow.ts) - AI analysis pipeline

## Dependencies Removed
As part of the security refactor, these dependencies were removed:

```json
// REMOVED from package.json
"dotenv": "^17.0.1"  // No longer needed - replaced with user config system
```

## Security Considerations
- **No bundled secrets**: Configuration loaded at runtime from user data directory
- **Context isolation**: All windows use context isolation and preload scripts
- **IPC validation**: All inter-process communication includes validation
- **User data separation**: Each user's configuration stored independently

## Distribution Building
For final distribution:

```bash
npm run dist:mac    # Build macOS DMG
# OR
npm run dist        # Build for current platform
```

**Note**: Distribution builds automatically handle file copying via electron-builder configuration in [package.json](mdc:package.json).

## Troubleshooting
Common issues during development:

### Settings Window Not Loading
- **Symptom**: "ERR_FILE_NOT_FOUND" for settings.html
- **Cause**: Missing manual file copy step
- **Solution**: Run the manual asset copying commands

### Configuration Not Loading
- **Symptom**: Settings window opens on every launch
- **Cause**: Invalid or missing user configuration
- **Solution**: Check user data directory for config.json validity

### Workflow Process Errors
- **Symptom**: "Cannot read properties of undefined (reading 'getPath')"
- **Cause**: Node.js child process trying to use Electron APIs
- **Solution**: Uses fallback path construction in `getConfigPath()`

## File Watching
During development, watch for changes in:
- TypeScript files: Auto-recompiled by your IDE/watch process
- Settings HTML/JS: Requires manual copying after changes
- Main interface HTML: Changes reflected immediately (no build needed)
