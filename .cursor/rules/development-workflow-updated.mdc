---
description: 
globs: 
alwaysApply: true
---
# Development Workflow (Post-Refactoring)

## Overview
This rule documents the updated development workflow after the comprehensive refactoring of Adjutant, including the improved build process and development practices.

## Complete Build Process

### 1. TypeScript Compilation
```bash
npm run build  # Compiles .ts files from src/ to dist/
```

### 2. Manual Asset Copying (Required)
The TypeScript compiler only handles `.ts` files. Window HTML assets must be copied manually (TypeScript files are compiled to `.js` automatically):

```bash
# Settings window assets
cp src/windows/settings.html dist/windows/

# Topic settings window assets  
cp src/windows/topic-settings.html dist/windows/

# Trash window assets
cp src/windows/trash.html dist/windows/

# Profile management window assets
cp src/windows/profile-management.html dist/windows/
```

### 3. Application Start
```bash
npm start  # Runs the compiled application from dist/
```

## Development Cycle
For active development, use this complete sequence:

```bash
# Complete development build
npm run build
cp src/windows/settings.html dist/windows/
cp src/windows/topic-settings.html dist/windows/
cp src/windows/trash.html dist/windows/
cp src/windows/profile-management.html dist/windows/
npm start
```

## File Structure After Refactoring

### Core Architecture Files
- [src/main.ts](mdc:src/main.ts) - Main process with centralized IPC handlers
- [src/config/user-config.ts](mdc:src/config/user-config.ts) - Schema-based configuration system

### Window Components (TypeScript)
- [src/windows/settings.html](mdc:src/windows/settings.html) + [src/windows/settings.ts](mdc:src/windows/settings.ts) - API configuration with type safety
- [src/windows/topic-settings.html](mdc:src/windows/topic-settings.html) + [src/windows/topic-settings.ts](mdc:src/windows/topic-settings.ts) - Topic filtering settings
- [src/windows/trash.html](mdc:src/windows/trash.html) + [src/windows/trash.ts](mdc:src/windows/trash.ts) - Not relevant articles management with Firebase typing
- [src/windows/profile-management.html](mdc:src/windows/profile-management.html) + [src/windows/profile-management.ts](mdc:src/windows/profile-management.ts) - Profile management with comprehensive TypeScript interfaces

### Build Output Structure
```
dist/
├── main.js                 # Compiled from src/main.ts
├── config/
│   └── user-config.js      # Compiled configuration system
├── windows/
│   ├── settings.html       # Copied manually
│   ├── settings.js         # Compiled from src/windows/settings.ts
│   ├── settings-preload.js # Compiled from src/windows/settings-preload.ts
│   ├── topic-settings.html # Copied manually
│   ├── topic-settings.js   # Compiled from src/windows/topic-settings.ts
│   ├── topic-settings-preload.js # Compiled from src/windows/topic-settings-preload.ts
│   ├── trash.html          # Copied manually
│   ├── trash.js            # Compiled from src/windows/trash.ts
│   ├── trash-preload.js    # Compiled from src/windows/trash-preload.ts
│   ├── profile-management.html # Copied manually
│   ├── profile-management.js # Compiled from src/windows/profile-management.ts
│   └── profile-management-preload.js # Compiled from src/windows/profile-management-preload.ts
└── ...
```

## Current Application Features

### Main Interface
- **Two-column layout**: Unrated articles (left) and Relevant articles (right)
- **Manual workflow control**: "📰 Fetch Stories" button for on-demand article fetching
- **Trash access**: "🗑️ Trash" button to view not relevant articles
- **Settings access**: "⚙️ Settings" button for configuration

### Window System
- **Main Window**: Article browsing and rating interface
- **Settings Window**: API configuration (Firebase + OpenAI) with live testing
- **Topic Settings Window**: Topic description configuration for filtering
- **Trash Window**: View and manage articles marked as "not relevant" with unrate functionality

### Article Rating System
- **Relevance-based**: Simple "Relevant" / "Not Relevant" rating system
- **Unrate functionality**: Articles can be moved back to unrated from any rated state
- **Real-time updates**: Firebase listeners provide instant UI updates
- **Trash management**: Not relevant articles can be reviewed and unrated from trash window

## Testing Workflow

### Configuration Testing
The refactored configuration system includes comprehensive validation:

```typescript
// Test configuration loading
const config = loadUserConfig();
if (!isConfigValid(config)) {
  console.log('Validation errors:', getConfigValidationErrors(config));
}
```

### API Testing
Settings windows now include live API testing:
- **Firebase Test**: Validates all 6 configuration fields with live connection
- **OpenAI Test**: Tests API key validity with actual API call
- **Real-time Feedback**: Success/error messages with specific error details

### Window Testing
Test all window creation patterns:
- Settings window (modal to main window)
- Topic settings window (modal to main window)
- Trash window (modal to main window)
- Main window (with menu and workflow integration)

### Workflow Testing
- **Manual Fetch**: Test story fetching via UI button
- **Article Processing**: Verify AI analysis and content scraping
- **Rating System**: Test relevance rating and unrating functionality
- **Real-time Updates**: Verify Firebase listeners update UI immediately

## Code Quality Checks

### TypeScript Validation
```bash
npx tsc --noEmit  # Type checking without compilation
```

### Schema Validation
Configuration is validated using Zod schemas:
- Runtime validation with detailed error messages
- Type inference for compile-time safety
- Automatic validation in IPC handlers

## Development Best Practices

### IPC Handler Development
When adding new IPC handlers to [src/main.ts](mdc:src/main.ts):

1. **Choose the appropriate handler group**:
   - Configuration: `setupConfigHandlers()`
   - API Testing: `setupApiTestHandlers()`
   - Window Management: `setupWindowHandlers()`
   - Legacy: `setupLegacyHandlers()`

2. **Follow the error handling pattern**:
   ```typescript
   ipcMain.handle('new-handler', async (event, params) => {
     try {
       // Implementation
       return result;
     } catch (error) {
       console.error('Error in new-handler:', error);
       return null;
     }
   });
   ```

### Window Creation
Use the factory pattern for new windows:

```typescript
function createNewWindow(): void {
  newWindow = createWindow({
    width: 800,
    height: 600,
    title: 'New Window',
    htmlFile: 'path/to/file.html',
    preloadFile: 'path/to/preload.js',
    onClosed: () => { newWindow = null; }
  });
}
```

### Configuration Updates
When extending configuration:

1. **Update the Zod schema** in [src/config/user-config.ts](mdc:src/config/user-config.ts)
2. **Add validation logic** if needed
3. **Update settings UI** to handle new fields
4. **Test configuration loading/saving**

## Debugging and Troubleshooting

### Common Issues After Refactoring

#### Window Not Loading
- **Symptom**: "ERR_FILE_NOT_FOUND" for window HTML files
- **Cause**: Missing manual file copy step
- **Solution**: Run the manual asset copying commands for all windows

#### IPC Handler Not Found
- **Symptom**: "No handler registered for 'handler-name'"
- **Cause**: Handler not added to appropriate setup function
- **Solution**: Add handler to correct group in `setupIpcHandlers()`

#### Configuration Validation Errors
- **Symptom**: Settings window opens on every launch
- **Cause**: Configuration fails schema validation
- **Solution**: Check `getConfigValidationErrors()` output

#### Firebase Connection Issues
- **Symptom**: "No Firebase App '[DEFAULT]' has been created"
- **Cause**: Multiple Firebase instances or improper initialization
- **Solution**: Ensure each window uses unique app names and proper Firebase instance management

### Development Tools
- **DevTools**: Available in all windows during development (controlled by `APP_CONFIG.DEV_TOOLS_OPEN`)
- **Console Logging**: Comprehensive error logging in all IPC handlers
- **Type Checking**: Run `npx tsc --noEmit` for type validation

## Performance Considerations

### Build Performance
- **Incremental Builds**: TypeScript supports incremental compilation
- **Asset Copying**: Only copy changed files during development
- **Watch Mode**: Consider using `tsc --watch` for continuous compilation

### Runtime Performance
- **Lazy Loading**: Dynamic imports for optional dependencies
- **Resource Management**: Proper cleanup of window references
- **Configuration Caching**: Configuration loaded once at startup
- **Firebase Optimization**: Separate app instances prevent conflicts

## Distribution Building

### Production Build
```bash
npm run dist:mac    # Build macOS DMG
# OR
npm run dist        # Build for current platform
```

### Build Validation
Before distribution:
1. Run complete build process
2. Test all window creation
3. Validate configuration system
4. Test API connections
5. Verify article rating and trash functionality
6. Test manual workflow triggering
7. Verify cross-platform compatibility

## Migration Notes

### From Previous Version
If migrating from pre-refactoring code:
1. **IPC Handlers**: May need to update handler names/signatures
2. **Window Creation**: Update to use factory pattern
3. **Configuration**: Existing config files should work with new validation
4. **Build Process**: Add manual asset copying step for all windows
5. **Rating System**: Update from user_rating to relevance-based system

### Backward Compatibility
- **Configuration Files**: Old config files are automatically migrated
- **IPC Handlers**: Legacy handlers maintained for compatibility
- **Window Behavior**: All existing functionality preserved
- **Data Model**: Relevance system replaces complex rating system
