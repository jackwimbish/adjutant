## Project Context Rule

**For queries about:**
- "What is this project's architecture|data model|plan|overview|stack?"
- "How does this app work?"
- "Tell me about this project."

**Read these files first:**
- `_docs/project-overview.md`
- `_docs/data-model.md`
- `_docs/development-plan.md`

## Universal Rules

### Always Ignore
- `node_modules`
- `dist`
- `release-builds`
- `out`
- `package-lock.json`
- `.git`

### Project Hints
- This is an Electron application written in TypeScript.
- The project uses Firebase Firestore as its database.
- The AI processing is handled by LangGraph and the OpenAI API.
- Follow a clean, modular coding style. Add comments for complex logic.

## API Keys and Configuration

This project uses a **user configuration system** that stores API keys and settings in the user's data directory at runtime, ensuring no sensitive information is bundled with the distributed application.

### Configuration Storage
- **Development**: `~/Library/Application Support/adjutant/config.json`
- **Production**: `~/Library/Application Support/Adjutant/config.json`
- **Windows**: `%APPDATA%/adjutant/config.json` (dev) or `%APPDATA%/Adjutant/config.json` (prod)
- **Linux**: `~/.config/adjutant/config.json` (dev) or `~/.config/Adjutant/config.json` (prod)

### Configuration Structure
The user configuration is managed by `src/config/user-config.ts` and follows this structure:

```typescript
interface UserConfig {
  firebase: {
    apiKey: string;
    authDomain: string;
    projectId: string;
    storageBucket: string;
    messagingSenderId: string;
    appId: string;
  };
  openai: {
    apiKey: string;
  };
  firstRun: boolean;
}
```

### How Configuration Works
1. **First Launch**: Settings window opens automatically for API key configuration
2. **Settings UI**: Accessible via Menu â†’ Settings (Cmd+,) with live API testing
3. **Runtime Loading**: Configuration loaded from user data directory at app startup
4. **Service Integration**: Config passed to Firebase and OpenAI services as parameters
5. **Security**: No API keys bundled in distributed app, stored only in user's local directory

### Code Usage
In the codebase, configuration is accessed through:
- `loadUserConfig()` - Load configuration from user data directory
- `saveUserConfig(config)` - Save configuration to user data directory
- Services accept config as parameters instead of using environment variables

**Note**: The `.env` file and `dotenv` dependency were removed in favor of this secure user configuration system.
